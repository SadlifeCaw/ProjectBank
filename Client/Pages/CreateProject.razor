@page "/projects/create"
@using ProjectBank.Infrastructure.Generator;
@using ProjectBank.Core;
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Create Project</PageTitle>

<head>
    <link rel="stylesheet" href="Dashboard.razor.css">
</head>

<h1>Create Project</h1>

<EditForm Model="@project" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="project.Title" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Description">Description</label>
        <InputTextArea id="Description" @bind-Value="project.Description" class="form-control" rows="7"/>
    </div>

    <div class="form-group">
    <button type="button" class="btn btn-sm btn-primary" @onclick="() => GetTags()">Generate Tags</button>  
        <div class="TagContainer">
            <ul>
                @foreach (var name in AllTags)
                {
                    <li>
                        @name;
                    </li>
                }
            </ul>
        </div>
        <div class="NewTagContainer">
            <div class="row w-50">
                <div class="col-7">
                    <input type="text" class="form-control" id="TagCreateForm" placeholder="Enter tag" @bind="NewTag">
                </div>
                
                <div class="col-4">
                    <button type="button" class="btn btn-success" @onclick="() => AddTagToList()"><i class="oi oi-plus"></i></button>
                </div>
            </div>
        </div>
    </div>

    <div class="Buffer_20"></div>

    <div class="form-group">
        <div>Project visibility</div>
        <InputRadioGroup @bind-Value="project.Status">
            <InputRadio id="Public" Value="@PUBLIC" class="form-check-input" /><label class="form-check-label" for="Public">Public</label>
            <InputRadio id="Private" Value="@PRIVATE" class="form-check-input" /><label class="form-check-label" for="Private">Private</label>
        </InputRadioGroup>
    </div>
    <div class="form-group">
        <p>If you choose to create a private project, it will not be visible to other users on their dashboard, unless you invite them as a student or collaborator.</p>
    </div>
    <div class="form-group">
        <br />
        <button type="button" class="btn btn-primary" @onclick="Cancel">Return</button>
        <button type="save" class="btn btn-secondary">Save</button>
        <button type="submit" class="btn btn-success btn-block">Post</button>
    </div>
</EditForm>

@code{
    private ProjectCreateDTO project = new();
    private TagGenerator tagGenerator = new TagGenerator();
    private ISet<string> AllTags = new HashSet<string>();
    private ISet<string> CreatedTags = new HashSet<string>();
    private string NewTag = string.Empty;
    private string description = string.Empty;

    private async Task HandleValidSubmit()
    {   

        project.TagIDs = new List<int>();

        foreach (var item in CreatedTags)
        {
            //post user generated tag
            TagCreateDTO newTag = new TagCreateDTO{Name = item};
            var tagResponse = await Http.PostAsJsonAsync("api/Tag", newTag);

            //add to project to post
            if (tagResponse.IsSuccessStatusCode)
            {
                var created = await tagResponse.Content.ReadFromJsonAsync<TagDTO>();
                project.TagIDs.Add(created.Id);
            }
        }

        project.UserIDs = new List<int>();
        project.AuthorID = 1;
        project.MaxStudents = 5;
        project.BucketIDs = new List<int>();
        project.CategoryID = 3;
        project.Status = ProjectStatus.PUBLIC;

        var response = await Http.PostAsJsonAsync("api/Projects", project);

        if (response.IsSuccessStatusCode)
        {   
            var created = await response.Content.ReadFromJsonAsync<ProjectDTO>();

            var uri = $"{NavigationManager.BaseUri}projects/{created?.Id}";

            NavigationManager.NavigateTo(uri);
        }
    }

    private void Cancel()
    {
        var uri = $"{NavigationManager.BaseUri}projects";

        NavigationManager.NavigateTo(uri);
    }

    public async void GetTags()
    {
        tagGenerator = new TagGenerator();

        var TagDTOs = await Http.GetFromJsonAsync<ICollection<TagDTO>>($"api/Tag");
        var TagNames = TagDTOs.Select(t => t.Name).ToList();

        tagGenerator.Add(TagNames);
        tagGenerator.Build();

        AllTags = tagGenerator.Find(project.Description).ToHashSet();
        AllTags.UnionWith(CreatedTags);

        StateHasChanged();
    }

    public ICollection<int>? ConvertToTagIDs(IEnumerable<string> TagNames){
        return new List<int>();
    }

    private void AddTagToList()
    {
        if(NewTag != "")
        {
            CreatedTags.Add(NewTag);
            AllTags.UnionWith(CreatedTags);
            StateHasChanged();
        }
    }
    
    /*
    THIS NEEDS TO BE IMPLEMENTED:
    private string Tags
    {
        get => string.Join(Environment.NewLine, project.TagIDs);
        set => project.TagIDs = value.Split(Environment.NewLine).Select(p => p.Trim()).Where(p => !string.IsNullOrWhiteSpace(p));
        
        <div class="form-group">
        <label for="Powers">Tags</label>
        <InputTextArea @bind-Value="Tags" class="form-control" rows="5" />
        </div>
    } 
    */
}
