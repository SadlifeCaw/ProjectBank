@page "/Projects/{projectID:int}"
@using ProjectBank.Infrastructure
@using ProjectBank.Core
@using ProjectBank.Core.EF.DTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>@title</PageTitle>

<head>
    <link rel="stylesheet" href="Dashboard.razor.css">
</head>

<div class="ProjectHeader">
    <h1 class="ProjectTitle">@title</h1>
    <!--Idea is to only show Status to the author of the project-->
    <div class="Status Public">
        <p>Public</p>
    </div>
</div>

<div class="Buffer_20"></div>   


<div class="row ProjectInfoDisplay">
  <div class="col-md-8 DescriptionContainer">
    <div class="DescriptionDisplay">
        <div class="row">
            
        </div>
        <div class="DescriptionTitle">
            <p>Published by <span id="AuthorContainer">@AuthorName</span></p>
        </div>  
        <div class="Description">
            <textarea readonly id="ProjectDescription" class="overflow-auto">@Description</textarea>
            <!--<button class="btn btn-info ContractButton" @onclick="@(() => ExpandedDescription())">@ExpandDescription</button>-->
        </div>
    </div>
  </div>
  <div class="col-6 col-md-4 AuxInfoContainer">
      <div class="row TargetGroup">
          <h1>Target Group</h1>
          <div class="TargetGroupContainer">
              <p>@TargetGroup</p>
          </div>
      </div>
      <div class="row">
          <div class="row">
              <div class="col-8">
                <h1>Collaborators</h1>
              </div>
              <div class="col-4">
                <button type="button" class="btn btn-sm ModalButton" @onclick="() => inviteModal.Open()">Invite</button>  
              </div>
          </div>
          <div class="CardContainer">
              <ul>
                @foreach (var element in supervisors)
                    {
                        @if(element.FirstName != string.Empty)
                        {
                            <li>
                                @(String.Format("{0} {1}", element.FirstName, element.LastName))
                            </li>
                        }
                    }
                </ul>
          </div>
      </div>
      <div class="row">
        <div class="row h-50">
              <div class="col-8">
                <h1>Students</h1>
              </div>
              <div class="col-4">
                <button type="button" class="btn btn-sm ModalButton" @onclick="() => applyModal.Open()">Apply</button>  
              </div>
          </div>
        <div class="CardContainer">
            <ul>
                @foreach (var element in students)
                {
                    @if(element.FirstName != string.Empty)
                    {
                        <li>
                        @(String.Format("{0} {1}", element.FirstName, element.LastName))
                        </li>
                    }
                }
            </ul>
        </div>
      </div>
      <div class="row">
          <h1>Project Tags</h1>
          <div class="CardContainer">
            <ul>
                @foreach (var element in tags)
                {
                    <li>
                        @element.Name;
                    </li>
                }
            </ul>
          </div>
      </div>
  </div>
</div>

<Modal @ref="inviteModal">
    <Title>Invite Supervisor</Title>
    <Body>
        <p>
            Invite a fellow supervisor to collaborate on this project. Note: Collaborators will have full authority over project details, bar deleting the post.
        </p>
        <div class="form-group">
            <label for="InviteFormGroup">Email Address: </label>
            <input type="email" class="form-control" id="InviteFormGroupInput" placeholder="name@example.com">
        </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="inviteModal" @onclick="() => inviteModal.Close()">Close</button>
        <button type="button" class="btn btn-success" data-dismiss="inviteModal" @onclick="() => inviteModal.Close()">Invite</button>
    </Footer>
</Modal>

<Modal @ref="applyModal">
    <Title>Apply for project</Title>
    <Body>
        <p>
              Are you absolutely sure about this? If you choose to apply for this course, you'll we committed to attend all lectures, go to the exam etc... You could really regret this.
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="applyModal" @onclick="() => applyModal.Close()">Close</button>
        <button type="button" class="btn btn-success" data-dismiss="inviteModal" @onclick="() => applyModal.Close()">Apply</button>
    </Footer>
</Modal>

<div class="Buffer_40"></div>

<div class="RelatedProjectsContainer">
    <h2>Related projects</h2>
    <button type="button" class="btn btn-block CustomButton">Tap to see within target group</button>
</div>

@code {
    string title = "Loading title...";
    string empty = string.Empty;
    string Description = "Loading description...";
    string AuthorName = string.Empty;
    string TargetGroup = "Loading...";
    
    [Parameter]
    public int? ProjectId {get; set;}
    private ProjectDTO project;
    private UserDTO author;
    private CategoryDTO category;
    private List<TagDTO> tags = new List<TagDTO>();
    private List<UserDTO> supervisors = new List<UserDTO>();
    private List<UserDTO> students = new List<UserDTO>();

    private Modal inviteModal { get; set; }

    private Modal applyModal { get; set; }

    /*private async void test()
    {
        var test = await Http.GetFromJsonAsync<UserDTO>($"api/Users/Supervisors/2");
            
        Console.WriteLine(test);
    }*/

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.project = await Http.GetFromJsonAsync<ProjectDTO>($"api/Projects/{ProjectId}");
            this.tags = await GetTagsDTOs(project.TagIDs).ToListAsync();
            this.author = await GetUserDTO(project.AuthorID);
            this.students = await GetStudentsDTOs(project.UserIDs).ToListAsync();
            this.supervisors = await GetSupervisorsDTOs(project.UserIDs).ToListAsync();
            this.category = await GetCategoryDTO(project.CategoryID);
        }
        catch (Exception exception)
        {
            Console.WriteLine(":((( {0}",exception.Message);
            Console.WriteLine("What the fuck?");
            //exception.Redirect();
        }
        this.Description = project.Description;
        this.title = project.Title;
        this.TargetGroup = category.Title;
        this.AuthorName = author.FirstName + " " + author.LastName;

        foreach (var item in students){Console.WriteLine("Student with ID: " + item.Id + " exists");}
    }

    private async IAsyncEnumerable<TagDTO> GetTagsDTOs(ICollection<int> tagIds) 
    {
        foreach (var id in tagIds)
        {
            //It crashes if you ask for id 7... which exists... wtf
            if(id == 7) 
            {
                continue;
            }
            yield return await Http.GetFromJsonAsync<TagDTO>($"api/Tag/{id}");
        }
    }

    private async IAsyncEnumerable<UserDTO> GetSupervisorsDTOs(ICollection<int> userIDs) 
    {
        foreach (var userID in userIDs)
        {
            UserDTO user = new UserDTO(-1, string.Empty, string.Empty, string.Empty, new List<int>());
            try 
            {
                user = await Http.GetFromJsonAsync<UserDTO>($"api/Users/Supervisors/{userID}");
            }
            catch(Exception e) 
            {
                //Not a supervisor, skip
            }
            yield return user;
        }
    }

    private async IAsyncEnumerable<UserDTO> GetStudentsDTOs(ICollection<int> userIDs) 
    {
        foreach (var userID in userIDs)
        {
            //yield return await Http.GetFromJsonAsync<UserDTO>($"api/Users/Students/{userID}");
            UserDTO user = new UserDTO(-1, string.Empty, string.Empty, string.Empty, new List<int>());
            try 
            {
                user = await Http.GetFromJsonAsync<UserDTO>($"api/Users/Students/{userID}");
            }
            catch(Exception e) 
            {
                //Not a supervisor, skip
            }
            yield return user;
        }
    }

    private async Task<UserDTO> GetUserDTO(int userID) 
    {
        return await Http.GetFromJsonAsync<UserDTO>($"api/Users/{userID}");
    }

    private async Task<CategoryDTO> GetCategoryDTO(int catID) 
    {
        return await Http.GetFromJsonAsync<CategoryDTO>($"api/Categories/{catID}");
    }
}