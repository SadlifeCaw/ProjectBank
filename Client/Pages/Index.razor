@page "/"
@attribute [AllowAnonymous]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1 class="mb-3">Welcome</h1>

        <div class="buffer_20"></div>

        <div>
            <h2 class="align"> Your Projects </h2>
            <div class="ProjectListDisplay">
                @foreach (var project in projects)
            {
                <div class="ProjectDisplay">
                    <div class="TitleContainer">
                        <h1 class="Title">@project.Title</h1>
                        <div class="StudentDisplay">
                            <p class="StudentContent">@project.UserIDs.Count()/@project.MaxStudents</p>
                        </div>
                    </div>
                    <p class="Description">@project.Description</p>
                    <div class="TagDisplay">
                        <ul>
                            @foreach (var tag in project.TagNames)
                            {
                                <li class="tag tagbtn mx-1 px-1">@tag</li>
                            }
                        </ul>
                    </div>
                    <div class="ButtonDisplay">
                    <a href ="Projects/@project.Id" class="btn btn-primary">View More</a>
                    </div>
                    </div>
            }
            @if (projects.Count() == 0)
            {
                <h5>You do not own any projects yet...</h5>
                <div class="col-2">
                <p>
                    <button class="btn btn-primary align-self-center" @onclick="Create">Create New Project</button>
                </p>
            </div>
            }
            
            </div>
        </div>
    </Authorized>
     <NotAuthorized>
         Please log in to see your page
     </NotAuthorized>
</AuthorizeView>

@code{
string more = "View more";
UserDTO user;
[CascadingParameter]
private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    private ICollection<ProjectDTO> projects = new List<ProjectDTO>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GetUser();
            projects = await Http.GetFromJsonAsync<ProjectDTO[]>($"api/Projects/Own/{user.Id}");
         
        } catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task<UserDTO> GetUser()
    {
        var AuthState = await authenticationStateTask;
        var email = AuthState.User.Claims.First(c => c.Type.ToString() == "email").Value; 

        var user = await Http.GetFromJsonAsync<UserDTO>($"api/Users/Mail/{email}");

        return user;
    }

    private void Create()
    {
        var uri = $"{NavigationManager.BaseUri}projects/create";

        NavigationManager.NavigateTo(uri);
    }
}