@page "/Projects/{projectID:int}"
@using ProjectBank.Infrastructure
@using ProjectBank.Core
@using ProjectBank.Core.EF.DTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>@title</PageTitle>

<head>
    <link rel="stylesheet" href="Dashboard.razor.css">
</head>

<div class="ProjectHeader">
    <h1 class="ProjectTitle">@title</h1>
    <!--Idea is to only show Status to the author of the project-->
    <div class="Status Public">
        <p>Public</p>
    </div>
</div>

<div class="Buffer_20"></div>   


<div class="row ProjectInfoDisplay">
  <div class="col-md-8 DescriptionContainer">
    <div class="DescriptionDisplay">
        <div class="row">
            
        </div>
        <div class="DescriptionTitle">
            <p>Published by <span id="AuthorContainer">@AuthorName</span></p>
        </div>
        <div class="Description">
            <textarea readonly id="ProjectDescription" class="overflow-auto">@Description</textarea>
            <!--<button class="btn btn-info ContractButton" @onclick="@(() => ExpandedDescription())">@ExpandDescription</button>-->
        </div>
    </div>
  </div>
  <div class="col-6 col-md-4 AuxInfoContainer">
      <div class="row TargetGroup">
          <h1>Target Group</h1>
          <div class="TargetGroupContainer">
              <p>@TargetGroup</p>
          </div>
      </div>
      <div class="row">
          <div class="row">
              <div class="col-8">
                <h1>Collaborators</h1>
              </div>
              <div class="col-4">
                <button type="button" class="btn btn-sm InviteButton" @onclick="() => inviteModal.Open()">Invite</button>  
              </div>
          </div>
          <div class="CardContainer">
              <ul>
                  <li>Jens</li>
                  <li>Joe Biden</li>
              </ul>
          </div>
      </div>
      <div class="row">
          <div class="row">
              <div class="col-8">
                <h1>Students</h1>
              </div>
              <div class="col-4">
                <button type="button" class="btn btn-sm InviteButton"  @onclick="() => applyModal.Open()">Apply</button>  
              </div>
          </div>
          <div class="CardContainer">
              <ul>
                  <li>Student 1</li>
                  <li>Student 2</li>
                  <li>Donald J. Trump</li>
              </ul>
          </div>
      </div>
      <div class="row">
          <h1>Project Tags</h1>
          <div class="CardContainer">
              <ul>
                  <li>Economics</li>
                  <li>Database</li>
                  <li>C#</li>
                  <li>Mink</li>
              </ul>
          </div>
      </div>
  </div>
</div>

<Modal @ref="inviteModal">
    <Title>Invite Supervisor</Title>
    <Body>
        <p>
            Invite a fellow supervisor to collaborate on this project. Note: Collaborators will have full authority over project details, bar deleting the post.
        </p>
        <div class="form-group">
            <label for="InviteFormGroup">Email Address: </label>
            <input type="email" class="form-control" id="InviteFormGroupInput" placeholder="name@example.com">
        </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="inviteModal" @onclick="() => inviteModal.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="applyModal">
    <Title>Apply for project</Title>
    <Body>
        <p>
            Sorry, this functionality has not been implemented yet!
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="applyModal" @onclick="() => applyModal.Close()">Close</button>
    </Footer>
</Modal>

<div class="Buffer_40"></div>

<div class="RelatedProjectsContainer">
    <h2>Related projects</h2>
    <button type="button" class="btn btn-block CustomButton">Tap to see within target group</button>
</div>

@code {
    string title = "Project Title Which is Long";
    string empty = string.Empty;
    string Description = "Loading description...";
    int AuthorName = -1;
    string description = string.Empty;
    string ExpandDescription = "Contract";

    int TargetGroup = -1;
    
    private IProject[]? projects;
    
    [Parameter]
    public int? ProjectId {get; set;}

    ProjectDTO project;

    private Modal inviteModal { get; set; }

    private Modal applyModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //int ProjectID = 1;
            //ProjectId = 1;
            project = await Http.GetFromJsonAsync<ProjectDTO>($"api/Projects/{ProjectId}");
        }
        catch (Exception exception)
        {
            Console.WriteLine(":((( {0}",exception.Message);
            Console.WriteLine("What the fuck?");
            //exception.Redirect();
        }
        this.description = project.Description;
        this.title = project.Title + ", ID: " + project.Id;
        this.TargetGroup = project.CategoryID;
        this.AuthorName = project.AuthorID;
        ExpandedDescription(true);
    }

    public void ExpandedDescription(bool IsExpanded){
        Console.WriteLine("pressed the button");
        if(IsExpanded) {
            this.Description = description;
            this.ExpandDescription = "Contract";
        }
        else {
            this.Description = description.Substring(0,200) + "...";
            this.ExpandDescription = "Expand";
        }
    }

    public void ExpandedDescription(){
        if(this.ExpandDescription == "Expand") ExpandedDescription(true);
        else ExpandedDescription(false);
    }
}